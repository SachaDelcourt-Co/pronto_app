rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMINISTRATEUR GENERAL';
    }

    // Function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Allow read if user owns the document or is admin
      allow read: if isAuthenticated() && (userId == request.auth.uid || isAdmin());
      // Allow create if authenticated and userId matches auth uid
      allow create: if isAuthenticated() && userId == request.auth.uid;
      // Allow update if user owns the document or is admin
      allow update: if isAuthenticated() && (userId == request.auth.uid || isAdmin());
      // Allow delete if admin only
      allow delete: if isAdmin();
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userID == request.auth.uid;
      allow update: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
    }

    // Appointments collection
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userID == request.auth.uid;
      allow update: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
    }

    // Reminders collection
    match /reminders/{reminderId} {
      allow read: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userID == request.auth.uid;
      allow update: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
    }

    // Notes collection
    match /notes/{noteId} {
      allow read: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userID == request.auth.uid;
      allow update: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
    }

    // SupportChats collection
    match /supportChats/{chatId} {
      allow read: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userID == request.auth.uid;
      allow update: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow delete: if isAdmin();

      // Nested messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          (get(/databases/$(database)/documents/supportChats/$(chatId)).data.userID == request.auth.uid || isAdmin());
        allow create: if isAuthenticated() && 
          (request.auth.uid == get(/databases/$(database)/documents/supportChats/$(chatId)).data.userID || isAdmin());
        allow update: if false;
        allow delete: if isAdmin();
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
      allow create: if false; // Only created by Cloud Functions
      allow update: if false;
      allow delete: if isAuthenticated() && (resource.data.userID == request.auth.uid || isAdmin());
    }

    // MotivationalPhrases collection
    match /motivationalPhrases/{category} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // EncouragementPhrases collection
    match /encouragementPhrases/{range} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // AdminAnalytics collection
    match /adminAnalytics/{document=**} {
      allow read: if isAdmin();
      allow write: if false; // Only managed through Cloud Functions
    }

    // Suspicious activity logs
    match /suspiciousActivity/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only managed through Cloud Functions
    }
  }
}